{"version":3,"sources":["App.js","ValidEmail.js","ValidPass.js","serviceWorker.js","index.js"],"names":["Copyright","Typography","variant","color","align","Link","href","Date","getFullYear","App","props","mailHandle","e","mailValue","target","value","setState","mail","console","log","passwordHandle","passwordValue","password","chekvalid","email","isEmailValid","state","test","String","toLowerCase","isPasswordValid","length","ValidPass","message","Container","component","maxWidth","CssBaseline","className","focusable","viewBox","aria-hidden","role","fill","d","opacity","noValidate","TextField","margin","required","fullWidth","id","label","name","autoComplete","autoFocus","this","onChange","type","FormControlLabel","control","Checkbox","Button","onClick","Grid","container","item","xs","Box","mt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e80984df.chunk.js","sourcesContent":["import React from 'react';\nimport {ValidEmail} from './ValidEmail';\nimport {ValidPass} from './ValidPass';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state ={\n      mail: '',\n      password: '',\n      message: ''\n     }\n }\n  mailHandle = (e)=> {\n    const mailValue =  e.target.value;\n   this.setState({\n      mail: mailValue\n     })\n     console.log(mailValue)\n    }\n  passwordHandle =(e) =>{\n      const passwordValue = e.target.value;\n      this.setState({\n       password: passwordValue\n      })\n      console.log(passwordValue)\n    }\n\n\nchekvalid=()=>{\n   const isEmailValid = ValidEmail(this.state.mail);\n   const isPasswordValid = ValidPass(this.state.password);\n   if(!isEmailValid){\n     this.setState({\n      message: 'email is not valid'\n     })\n  }\n   if(!isPasswordValid){\n     this.setState({\n       message: 'password should have more then 5 character'\n     })\n   }\n   if(this.state.mail.length ===0){\n    this.setState({\n      message: 'you should fill your email'\n    })\n  }\n    if(this.state.password.length ===0){\n      this.setState({\n        message: 'you should fill your password'\n      }) \n   }\n   if(this.state.password.length ===0 && this.state.mail.length ===0){\n    this.setState({\n      message: 'you should fill your email and password'\n    }) \n }\n   if(isEmailValid && isPasswordValid){\n     this.setState({\n       message: 'success'\n     })\n   }\n}\n\n//arji tanel chekvalid@ durs arandzin komponent sarqel te voch???\n\n   \nrender(){\n    return(\n     <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div>\n         <div className=\"MuiAvatar-root MuiAvatar-circle jss2 MuiAvatar-colorDefault\">\n          <svg className=\"MuiSvgIcon-root\" focusable=\"false\"\n           viewBox=\"0 0 24 24\" aria-hidden=\"true\" role=\"presentation\">\n             <g fill=\"none\"><path d=\"M0 0h24v24H0V0z\">\n               </path><path d=\"M0 0h24v24H0V0z\" opacity=\".87\"></path>\n               </g><path d=\"M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zM9 6c0-1.66 1.34-3 3-3s3 1.34 3 3v2H9V6zm9 14H6V10h12v10zm-6-3c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2z\">\n                 </path></svg></div> \n\n        \n         <Typography component=\"h1\" variant=\"h5\">\n          Sign in\n        </Typography>\n        <form noValidate>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"email\"\n            label=\"Email Address\"\n            name=\"email\"\n            autoComplete=\"email\"\n            autoFocus\n            value={this.state.mail} onChange={this.mailHandle}\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            id=\"password\"\n            autoComplete=\"current-password\"\n            value={this.state.password} onChange={this.passwordHandle}\n          />\n          <div className='message'>{this.state.message}</div>\n          <FormControlLabel\n            control={<Checkbox value=\"remember\" color=\"primary\" />}\n            label=\"Remember me\"\n          />\n          <Button\n             type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={this.chekvalid} \n          >\n            Sign In\n          </Button>\n          <Grid container>\n            <Grid item xs>\n              <Link href=\"#\" variant=\"body2\">\n                Forgot password?\n              </Link>\n            </Grid>\n            <Grid item>\n              <Link href=\"#\" variant=\"body2\">\n                {\"Don't have an account? Sign Up\"}\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n      <Box mt={8}>\n        <Copyright />\n      </Box>\n    </Container>\n    )\n  }\n}\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright Â© '}\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\n        Your Website\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\n\n\nexport default App;\n","\r\nexport function ValidEmail(email) {\r\n var re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n     return re.test(String(email).toLowerCase());\r\n\r\n}","export function ValidPass(email) {\r\n    if(email.length > 5){\r\n        return true;\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}